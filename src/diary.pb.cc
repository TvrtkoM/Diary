// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "diary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Diary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Diary_Author_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diary_Author_reflection_ = NULL;
const ::google::protobuf::Descriptor* Diary_Note_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diary_Note_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_diary_2eproto() {
  protobuf_AddDesc_diary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "diary.proto");
  GOOGLE_CHECK(file != NULL);
  Diary_descriptor_ = file->message_type(0);
  static const int Diary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary, note_),
  };
  Diary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Diary_descriptor_,
      Diary::default_instance_,
      Diary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Diary));
  Diary_Author_descriptor_ = Diary_descriptor_->nested_type(0);
  static const int Diary_Author_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Author, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Author, middlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Author, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Author, birthdate_),
  };
  Diary_Author_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Diary_Author_descriptor_,
      Diary_Author::default_instance_,
      Diary_Author_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Author, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Author, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Diary_Author));
  Diary_Note_descriptor_ = Diary_descriptor_->nested_type(1);
  static const int Diary_Note_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Note, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Note, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Note, text_),
  };
  Diary_Note_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Diary_Note_descriptor_,
      Diary_Note::default_instance_,
      Diary_Note_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Note, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diary_Note, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Diary_Note));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_diary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Diary_descriptor_, &Diary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Diary_Author_descriptor_, &Diary_Author::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Diary_Note_descriptor_, &Diary_Note::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_diary_2eproto() {
  delete Diary::default_instance_;
  delete Diary_reflection_;
  delete Diary_Author::default_instance_;
  delete Diary_Author_reflection_;
  delete Diary_Note::default_instance_;
  delete Diary_Note_reflection_;
}

void protobuf_AddDesc_diary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013diary.proto\"\316\001\n\005Diary\022\035\n\006author\030\001 \002(\0132"
    "\r.Diary.Author\022\031\n\004note\030\002 \003(\0132\013.Diary.Not"
    "e\032T\n\006Author\022\021\n\tfirstname\030\001 \002(\t\022\022\n\nmiddle"
    "name\030\002 \001(\t\022\020\n\010lastname\030\003 \002(\t\022\021\n\tbirthdat"
    "e\030\004 \002(\t\0325\n\004Note\022\020\n\010datetime\030\002 \002(\t\022\r\n\005tit"
    "le\030\003 \001(\t\022\014\n\004text\030\004 \002(\t", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diary.proto", &protobuf_RegisterTypes);
  Diary::default_instance_ = new Diary();
  Diary_Author::default_instance_ = new Diary_Author();
  Diary_Note::default_instance_ = new Diary_Note();
  Diary::default_instance_->InitAsDefaultInstance();
  Diary_Author::default_instance_->InitAsDefaultInstance();
  Diary_Note::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_diary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_diary_2eproto {
  StaticDescriptorInitializer_diary_2eproto() {
    protobuf_AddDesc_diary_2eproto();
  }
} static_descriptor_initializer_diary_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Diary_Author::kFirstnameFieldNumber;
const int Diary_Author::kMiddlenameFieldNumber;
const int Diary_Author::kLastnameFieldNumber;
const int Diary_Author::kBirthdateFieldNumber;
#endif  // !_MSC_VER

Diary_Author::Diary_Author()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Diary_Author::InitAsDefaultInstance() {
}

Diary_Author::Diary_Author(const Diary_Author& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Diary_Author::SharedCtor() {
  _cached_size_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  middlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diary_Author::~Diary_Author() {
  SharedDtor();
}

void Diary_Author::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (middlename_ != &::google::protobuf::internal::kEmptyString) {
    delete middlename_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (birthdate_ != &::google::protobuf::internal::kEmptyString) {
    delete birthdate_;
  }
  if (this != default_instance_) {
  }
}

void Diary_Author::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diary_Author::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diary_Author_descriptor_;
}

const Diary_Author& Diary_Author::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diary_2eproto();  return *default_instance_;
}

Diary_Author* Diary_Author::default_instance_ = NULL;

Diary_Author* Diary_Author::New() const {
  return new Diary_Author;
}

void Diary_Author::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    if (has_middlename()) {
      if (middlename_ != &::google::protobuf::internal::kEmptyString) {
        middlename_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
    if (has_birthdate()) {
      if (birthdate_ != &::google::protobuf::internal::kEmptyString) {
        birthdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Diary_Author::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string firstname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_middlename;
        break;
      }
      
      // optional string middlename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_middlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_middlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->middlename().data(), this->middlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastname;
        break;
      }
      
      // required string lastname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_birthdate;
        break;
      }
      
      // required string birthdate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthdate().data(), this->birthdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Diary_Author::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->firstname(), output);
  }
  
  // optional string middlename = 2;
  if (has_middlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->middlename().data(), this->middlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->middlename(), output);
  }
  
  // required string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lastname(), output);
  }
  
  // required string birthdate = 4;
  if (has_birthdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthdate().data(), this->birthdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->birthdate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Diary_Author::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }
  
  // optional string middlename = 2;
  if (has_middlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->middlename().data(), this->middlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->middlename(), target);
  }
  
  // required string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastname(), target);
  }
  
  // required string birthdate = 4;
  if (has_birthdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthdate().data(), this->birthdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->birthdate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Diary_Author::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string firstname = 1;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }
    
    // optional string middlename = 2;
    if (has_middlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->middlename());
    }
    
    // required string lastname = 3;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }
    
    // required string birthdate = 4;
    if (has_birthdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthdate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diary_Author::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Diary_Author* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diary_Author*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diary_Author::MergeFrom(const Diary_Author& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_middlename()) {
      set_middlename(from.middlename());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_birthdate()) {
      set_birthdate(from.birthdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Diary_Author::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diary_Author::CopyFrom(const Diary_Author& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diary_Author::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void Diary_Author::Swap(Diary_Author* other) {
  if (other != this) {
    std::swap(firstname_, other->firstname_);
    std::swap(middlename_, other->middlename_);
    std::swap(lastname_, other->lastname_);
    std::swap(birthdate_, other->birthdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Diary_Author::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diary_Author_descriptor_;
  metadata.reflection = Diary_Author_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Diary_Note::kDatetimeFieldNumber;
const int Diary_Note::kTitleFieldNumber;
const int Diary_Note::kTextFieldNumber;
#endif  // !_MSC_VER

Diary_Note::Diary_Note()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Diary_Note::InitAsDefaultInstance() {
}

Diary_Note::Diary_Note(const Diary_Note& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Diary_Note::SharedCtor() {
  _cached_size_ = 0;
  datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diary_Note::~Diary_Note() {
  SharedDtor();
}

void Diary_Note::SharedDtor() {
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete datetime_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Diary_Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diary_Note::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diary_Note_descriptor_;
}

const Diary_Note& Diary_Note::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diary_2eproto();  return *default_instance_;
}

Diary_Note* Diary_Note::default_instance_ = NULL;

Diary_Note* Diary_Note::New() const {
  return new Diary_Note;
}

void Diary_Note::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datetime()) {
      if (datetime_ != &::google::protobuf::internal::kEmptyString) {
        datetime_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Diary_Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string datetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datetime().data(), this->datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }
      
      // required string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Diary_Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string datetime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->datetime(), output);
  }
  
  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // required string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Diary_Note::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string datetime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }
  
  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // required string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Diary_Note::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string datetime = 2;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datetime());
    }
    
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diary_Note::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Diary_Note* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diary_Note*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diary_Note::MergeFrom(const Diary_Note& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Diary_Note::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diary_Note::CopyFrom(const Diary_Note& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diary_Note::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void Diary_Note::Swap(Diary_Note* other) {
  if (other != this) {
    std::swap(datetime_, other->datetime_);
    std::swap(title_, other->title_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Diary_Note::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diary_Note_descriptor_;
  metadata.reflection = Diary_Note_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Diary::kAuthorFieldNumber;
const int Diary::kNoteFieldNumber;
#endif  // !_MSC_VER

Diary::Diary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Diary::InitAsDefaultInstance() {
  author_ = const_cast< ::Diary_Author*>(&::Diary_Author::default_instance());
}

Diary::Diary(const Diary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Diary::SharedCtor() {
  _cached_size_ = 0;
  author_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diary::~Diary() {
  SharedDtor();
}

void Diary::SharedDtor() {
  if (this != default_instance_) {
    delete author_;
  }
}

void Diary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diary_descriptor_;
}

const Diary& Diary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diary_2eproto();  return *default_instance_;
}

Diary* Diary::default_instance_ = NULL;

Diary* Diary::New() const {
  return new Diary;
}

void Diary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_author()) {
      if (author_ != NULL) author_->::Diary_Author::Clear();
    }
  }
  note_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Diary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diary.Author author = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_note;
        break;
      }
      
      // repeated .Diary.Note note = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_note()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_note;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Diary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Diary.Author author = 1;
  if (has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->author(), output);
  }
  
  // repeated .Diary.Note note = 2;
  for (int i = 0; i < this->note_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->note(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Diary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Diary.Author author = 1;
  if (has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->author(), target);
  }
  
  // repeated .Diary.Note note = 2;
  for (int i = 0; i < this->note_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->note(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Diary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diary.Author author = 1;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->author());
    }
    
  }
  // repeated .Diary.Note note = 2;
  total_size += 1 * this->note_size();
  for (int i = 0; i < this->note_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->note(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Diary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diary::MergeFrom(const Diary& from) {
  GOOGLE_CHECK_NE(&from, this);
  note_.MergeFrom(from.note_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_author()) {
      mutable_author()->::Diary_Author::MergeFrom(from.author());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Diary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diary::CopyFrom(const Diary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_author()) {
    if (!this->author().IsInitialized()) return false;
  }
  for (int i = 0; i < note_size(); i++) {
    if (!this->note(i).IsInitialized()) return false;
  }
  return true;
}

void Diary::Swap(Diary* other) {
  if (other != this) {
    std::swap(author_, other->author_);
    note_.Swap(&other->note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Diary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diary_descriptor_;
  metadata.reflection = Diary_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
